527e67c8b6db59b913e27d5f3d73195b
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 */
'use strict';

module.exports = (moduleName, instanceMethods) => {
  const RealComponent = jest.requireActual(moduleName);

  const React = require('react');

  const SuperClass = typeof RealComponent === 'function' ? RealComponent : React.Component;
  const name = RealComponent.displayName || RealComponent.name || (RealComponent.render // handle React.forwardRef
  ? RealComponent.render.displayName || RealComponent.render.name : 'Unknown');
  const nameWithoutPrefix = name.replace(/^(RCT|RK)/, '');
  const Component = class extends SuperClass {
    static displayName = 'Component';

    render() {
      const props = Object.assign({}, RealComponent.defaultProps);

      if (this.props) {
        Object.keys(this.props).forEach(prop => {
          // We can't just assign props on top of defaultProps
          // because React treats undefined as special and different from null.
          // If a prop is specified but set to undefined it is ignored and the
          // default prop is used instead. If it is set to null, then the
          // null value overwrites the default value.
          if (this.props[prop] !== undefined) {
            props[prop] = this.props[prop];
          }
        });
      }

      return React.createElement(nameWithoutPrefix, props, this.props.children);
    }

  };
  Component.displayName = nameWithoutPrefix;
  Object.keys(RealComponent).forEach(classStatic => {
    Component[classStatic] = RealComponent[classStatic];
  });

  if (instanceMethods != null) {
    Object.assign(Component.prototype, instanceMethods);
  }

  return Component;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwibW9kdWxlTmFtZSIsImluc3RhbmNlTWV0aG9kcyIsIlJlYWxDb21wb25lbnQiLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsIlJlYWN0IiwicmVxdWlyZSIsIlN1cGVyQ2xhc3MiLCJDb21wb25lbnQiLCJuYW1lIiwiZGlzcGxheU5hbWUiLCJyZW5kZXIiLCJuYW1lV2l0aG91dFByZWZpeCIsInJlcGxhY2UiLCJwcm9wcyIsIk9iamVjdCIsImFzc2lnbiIsImRlZmF1bHRQcm9wcyIsImtleXMiLCJmb3JFYWNoIiwicHJvcCIsInVuZGVmaW5lZCIsImNyZWF0ZUVsZW1lbnQiLCJjaGlsZHJlbiIsImNsYXNzU3RhdGljIiwicHJvdG90eXBlIl0sInNvdXJjZXMiOlsibW9ja0NvbXBvbmVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gKG1vZHVsZU5hbWUsIGluc3RhbmNlTWV0aG9kcykgPT4ge1xuICBjb25zdCBSZWFsQ29tcG9uZW50ID0gamVzdC5yZXF1aXJlQWN0dWFsKG1vZHVsZU5hbWUpO1xuICBjb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbiAgY29uc3QgU3VwZXJDbGFzcyA9XG4gICAgdHlwZW9mIFJlYWxDb21wb25lbnQgPT09ICdmdW5jdGlvbicgPyBSZWFsQ29tcG9uZW50IDogUmVhY3QuQ29tcG9uZW50O1xuXG4gIGNvbnN0IG5hbWUgPVxuICAgIFJlYWxDb21wb25lbnQuZGlzcGxheU5hbWUgfHxcbiAgICBSZWFsQ29tcG9uZW50Lm5hbWUgfHxcbiAgICAoUmVhbENvbXBvbmVudC5yZW5kZXIgLy8gaGFuZGxlIFJlYWN0LmZvcndhcmRSZWZcbiAgICAgID8gUmVhbENvbXBvbmVudC5yZW5kZXIuZGlzcGxheU5hbWUgfHwgUmVhbENvbXBvbmVudC5yZW5kZXIubmFtZVxuICAgICAgOiAnVW5rbm93bicpO1xuXG4gIGNvbnN0IG5hbWVXaXRob3V0UHJlZml4ID0gbmFtZS5yZXBsYWNlKC9eKFJDVHxSSykvLCAnJyk7XG5cbiAgY29uc3QgQ29tcG9uZW50ID0gY2xhc3MgZXh0ZW5kcyBTdXBlckNsYXNzIHtcbiAgICBzdGF0aWMgZGlzcGxheU5hbWUgPSAnQ29tcG9uZW50JztcblxuICAgIHJlbmRlcigpIHtcbiAgICAgIGNvbnN0IHByb3BzID0gT2JqZWN0LmFzc2lnbih7fSwgUmVhbENvbXBvbmVudC5kZWZhdWx0UHJvcHMpO1xuXG4gICAgICBpZiAodGhpcy5wcm9wcykge1xuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLnByb3BzKS5mb3JFYWNoKHByb3AgPT4ge1xuICAgICAgICAgIC8vIFdlIGNhbid0IGp1c3QgYXNzaWduIHByb3BzIG9uIHRvcCBvZiBkZWZhdWx0UHJvcHNcbiAgICAgICAgICAvLyBiZWNhdXNlIFJlYWN0IHRyZWF0cyB1bmRlZmluZWQgYXMgc3BlY2lhbCBhbmQgZGlmZmVyZW50IGZyb20gbnVsbC5cbiAgICAgICAgICAvLyBJZiBhIHByb3AgaXMgc3BlY2lmaWVkIGJ1dCBzZXQgdG8gdW5kZWZpbmVkIGl0IGlzIGlnbm9yZWQgYW5kIHRoZVxuICAgICAgICAgIC8vIGRlZmF1bHQgcHJvcCBpcyB1c2VkIGluc3RlYWQuIElmIGl0IGlzIHNldCB0byBudWxsLCB0aGVuIHRoZVxuICAgICAgICAgIC8vIG51bGwgdmFsdWUgb3ZlcndyaXRlcyB0aGUgZGVmYXVsdCB2YWx1ZS5cbiAgICAgICAgICBpZiAodGhpcy5wcm9wc1twcm9wXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBwcm9wc1twcm9wXSA9IHRoaXMucHJvcHNbcHJvcF07XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQobmFtZVdpdGhvdXRQcmVmaXgsIHByb3BzLCB0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgICB9XG4gIH07XG5cbiAgQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gbmFtZVdpdGhvdXRQcmVmaXg7XG5cbiAgT2JqZWN0LmtleXMoUmVhbENvbXBvbmVudCkuZm9yRWFjaChjbGFzc1N0YXRpYyA9PiB7XG4gICAgQ29tcG9uZW50W2NsYXNzU3RhdGljXSA9IFJlYWxDb21wb25lbnRbY2xhc3NTdGF0aWNdO1xuICB9KTtcblxuICBpZiAoaW5zdGFuY2VNZXRob2RzICE9IG51bGwpIHtcbiAgICBPYmplY3QuYXNzaWduKENvbXBvbmVudC5wcm90b3R5cGUsIGluc3RhbmNlTWV0aG9kcyk7XG4gIH1cblxuICByZXR1cm4gQ29tcG9uZW50O1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsQ0FBQ0MsVUFBRCxFQUFhQyxlQUFiLEtBQWlDO0VBQ2hELE1BQU1DLGFBQWEsR0FBR0MsSUFBSSxDQUFDQyxhQUFMLENBQW1CSixVQUFuQixDQUF0Qjs7RUFDQSxNQUFNSyxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztFQUVBLE1BQU1DLFVBQVUsR0FDZCxPQUFPTCxhQUFQLEtBQXlCLFVBQXpCLEdBQXNDQSxhQUF0QyxHQUFzREcsS0FBSyxDQUFDRyxTQUQ5RDtFQUdBLE1BQU1DLElBQUksR0FDUlAsYUFBYSxDQUFDUSxXQUFkLElBQ0FSLGFBQWEsQ0FBQ08sSUFEZCxLQUVDUCxhQUFhLENBQUNTLE1BQWQsQ0FBcUI7RUFBckIsRUFDR1QsYUFBYSxDQUFDUyxNQUFkLENBQXFCRCxXQUFyQixJQUFvQ1IsYUFBYSxDQUFDUyxNQUFkLENBQXFCRixJQUQ1RCxHQUVHLFNBSkosQ0FERjtFQU9BLE1BQU1HLGlCQUFpQixHQUFHSCxJQUFJLENBQUNJLE9BQUwsQ0FBYSxXQUFiLEVBQTBCLEVBQTFCLENBQTFCO0VBRUEsTUFBTUwsU0FBUyxHQUFHLGNBQWNELFVBQWQsQ0FBeUI7SUFDdkIsT0FBWEcsV0FBVyxHQUFHLFdBQUg7O0lBRWxCQyxNQUFNLEdBQUc7TUFDUCxNQUFNRyxLQUFLLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JkLGFBQWEsQ0FBQ2UsWUFBaEMsQ0FBZDs7TUFFQSxJQUFJLEtBQUtILEtBQVQsRUFBZ0I7UUFDZEMsTUFBTSxDQUFDRyxJQUFQLENBQVksS0FBS0osS0FBakIsRUFBd0JLLE9BQXhCLENBQWdDQyxJQUFJLElBQUk7VUFDdEM7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBLElBQUksS0FBS04sS0FBTCxDQUFXTSxJQUFYLE1BQXFCQyxTQUF6QixFQUFvQztZQUNsQ1AsS0FBSyxDQUFDTSxJQUFELENBQUwsR0FBYyxLQUFLTixLQUFMLENBQVdNLElBQVgsQ0FBZDtVQUNEO1FBQ0YsQ0FURDtNQVVEOztNQUVELE9BQU9mLEtBQUssQ0FBQ2lCLGFBQU4sQ0FBb0JWLGlCQUFwQixFQUF1Q0UsS0FBdkMsRUFBOEMsS0FBS0EsS0FBTCxDQUFXUyxRQUF6RCxDQUFQO0lBQ0Q7O0VBcEJ3QyxDQUEzQztFQXVCQWYsU0FBUyxDQUFDRSxXQUFWLEdBQXdCRSxpQkFBeEI7RUFFQUcsTUFBTSxDQUFDRyxJQUFQLENBQVloQixhQUFaLEVBQTJCaUIsT0FBM0IsQ0FBbUNLLFdBQVcsSUFBSTtJQUNoRGhCLFNBQVMsQ0FBQ2dCLFdBQUQsQ0FBVCxHQUF5QnRCLGFBQWEsQ0FBQ3NCLFdBQUQsQ0FBdEM7RUFDRCxDQUZEOztFQUlBLElBQUl2QixlQUFlLElBQUksSUFBdkIsRUFBNkI7SUFDM0JjLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjUixTQUFTLENBQUNpQixTQUF4QixFQUFtQ3hCLGVBQW5DO0VBQ0Q7O0VBRUQsT0FBT08sU0FBUDtBQUNELENBbEREIn0=